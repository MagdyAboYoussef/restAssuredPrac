[{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:00.514Z","before":[{"result":{"duration":528255400,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":10,"name":"F01 | Create and retrieve a booking","description":"","id":"booking-api;f01-|-create-and-retrieve-a-booking;;2","after":[{"result":{"duration":999000,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":3458285500,"status":"passed"},"line":5,"name":"I create a booking with first name \"John\", last name \"Doe\", total price \"100\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"2020-01-02\", \"Breakfast\" successfully","match":{"arguments":[{"val":"\"John\"","offset":35},{"val":"\"Doe\"","offset":53},{"val":"\"100\"","offset":72},{"val":"\"true\"","offset":92},{"val":"\"2020-01-01\"","offset":109},{"val":"\"2020-01-02\"","offset":133},{"val":"\"Breakfast\"","offset":147}],"location":"stepDef.D01_createBookingAndVerify.CreateBookingInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"duration":357549500,"status":"passed"},"line":6,"name":"I should be able to retrieve the booking by ID","match":{"location":"stepDef.D01_createBookingAndVerify.i_should_be_able_to_retrieve_the_booking_by_id()"},"keyword":"And "},{"result":{"duration":132923800,"status":"passed"},"line":7,"name":"the retrieved booking should have first name \"John\", last name \"Doe\", total price \"100\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"2020-01-02\",\"Breakfast\"","match":{"arguments":[{"val":"\"John\"","offset":45},{"val":"\"Doe\"","offset":63},{"val":"\"100\"","offset":82},{"val":"\"true\"","offset":102},{"val":"\"2020-01-01\"","offset":119},{"val":"\"2020-01-02\"","offset":143},{"val":"\"Breakfast\"","offset":156}],"location":"stepDef.D01_createBookingAndVerify.the_retrieved_booking_should_have_first_name_last_name_total_price_deposit_paid_check_in_check_out(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:05.024Z","before":[{"result":{"duration":999800,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":11,"name":"F01 | Create and retrieve a booking","description":"","id":"booking-api;f01-|-create-and-retrieve-a-booking;;3","after":[{"result":{"duration":999500,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":349818800,"status":"passed"},"line":5,"name":"I create a booking with first name \"Jane\", last name \"Smith\", total price \"200\", deposit paid \"true\", check-in \"2020-02-01\", check-out \"2020-02-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Jane\"","offset":35},{"val":"\"Smith\"","offset":53},{"val":"\"200\"","offset":74},{"val":"\"true\"","offset":94},{"val":"\"2020-02-01\"","offset":111},{"val":"\"2020-02-02\"","offset":135},{"val":"\"Burger\"","offset":149}],"location":"stepDef.D01_createBookingAndVerify.CreateBookingInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"duration":324104800,"status":"passed"},"line":6,"name":"I should be able to retrieve the booking by ID","match":{"location":"stepDef.D01_createBookingAndVerify.i_should_be_able_to_retrieve_the_booking_by_id()"},"keyword":"And "},{"result":{"duration":159908400,"status":"passed"},"line":7,"name":"the retrieved booking should have first name \"Jane\", last name \"Smith\", total price \"200\", deposit paid \"true\", check-in \"2020-02-01\", check-out \"2020-02-02\",\"Burger\"","match":{"arguments":[{"val":"\"Jane\"","offset":45},{"val":"\"Smith\"","offset":63},{"val":"\"200\"","offset":84},{"val":"\"true\"","offset":104},{"val":"\"2020-02-01\"","offset":121},{"val":"\"2020-02-02\"","offset":145},{"val":"\"Burger\"","offset":158}],"location":"stepDef.D01_createBookingAndVerify.the_retrieved_booking_should_have_first_name_last_name_total_price_deposit_paid_check_in_check_out(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"Booking API","description":"","id":"booking-api","keyword":"Feature","uri":"file:src/main/resources/features/F01_createBookingAndVerify.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:05.876Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":9,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;2","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":338729200,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"John\", last name \"Doe\", total price \"-100\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"2020-01-02\", \"Breakfast\" successfully","match":{"arguments":[{"val":"\"John\"","offset":40},{"val":"\"Doe\"","offset":58},{"val":"\"-100\"","offset":77},{"val":"\"true\"","offset":98},{"val":"\"2020-01-01\"","offset":115},{"val":"\"2020-01-02\"","offset":139},{"val":"\"Breakfast\"","offset":153}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":19988500,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:06.259Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":10,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;3","after":[{"result":{"duration":1000100,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":319570000,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Jane\", last name \"Smith\", total price \"200\", deposit paid \"false\", check-in \"2020-02-01\", check-out \"2020-02-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Jane\"","offset":40},{"val":"\"Smith\"","offset":58},{"val":"\"200\"","offset":79},{"val":"\"false\"","offset":99},{"val":"\"2020-02-01\"","offset":117},{"val":"\"2020-02-02\"","offset":141},{"val":"\"Burger\"","offset":155}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":1033600,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:06.594Z","before":[{"result":{"duration":999800,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":11,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;4","after":[{"result":{"duration":998500,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":315481100,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Peter\", last name \"Mal\", total price \"test\", deposit paid \"true\", check-in \"2020-02-01\", check-out \"2020-02-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Peter\"","offset":40},{"val":"\"Mal\"","offset":59},{"val":"\"test\"","offset":78},{"val":"\"true\"","offset":99},{"val":"\"2020-02-01\"","offset":116},{"val":"\"2020-02-02\"","offset":140},{"val":"\"Burger\"","offset":154}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":998300,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:06.921Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":12,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;5","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":321988800,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Ahmed\", last name \"Tarik\", total price \"200\", deposit paid \"\", check-in \"2020-02-02\", check-out \"2020-01-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Ahmed\"","offset":40},{"val":"\"Tarik\"","offset":59},{"val":"\"200\"","offset":80},{"val":"\"\"","offset":100},{"val":"\"2020-02-02\"","offset":113},{"val":"\"2020-01-02\"","offset":137},{"val":"\"Burger\"","offset":151}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":999200,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:07.255Z","before":[{"result":{"duration":999900,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":13,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;6","after":[{"result":{"duration":999500,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":316836300,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Hisham\", last name \"Tarik\", total price \"200-4\", deposit paid \"true\", check-in \"2020-02-02\", check-out \"2020-01-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Hisham\"","offset":40},{"val":"\"Tarik\"","offset":60},{"val":"\"200-4\"","offset":81},{"val":"\"true\"","offset":103},{"val":"\"2020-02-02\"","offset":120},{"val":"\"2020-01-02\"","offset":144},{"val":"\"Burger\"","offset":158}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":982600,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:07.615Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":14,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;7","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":317936700,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Mohammed\", last name \"Tarik\", total price \"200\", deposit paid \"true\", check-in \"string\", check-out \"2020-01-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Mohammed\"","offset":40},{"val":"\"Tarik\"","offset":62},{"val":"\"200\"","offset":83},{"val":"\"true\"","offset":103},{"val":"\"string\"","offset":120},{"val":"\"2020-01-02\"","offset":140},{"val":"\"Burger\"","offset":154}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":1000300,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:07.947Z","before":[{"result":{"duration":999700,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":15,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;8","after":[{"result":{"duration":1999400,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":315653800,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Samer\", last name \"Tarik\", total price \"200\", deposit paid \"true\", check-in \"2020-02-02\", check-out \"string\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Samer\"","offset":40},{"val":"\"Tarik\"","offset":59},{"val":"\"200\"","offset":80},{"val":"\"true\"","offset":100},{"val":"\"2020-02-02\"","offset":117},{"val":"\"string\"","offset":141},{"val":"\"Burger\"","offset":151}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":997700,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:08.279Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":16,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;9","after":[{"result":{"duration":1001900,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":310821600,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"15\", last name \"Tarik\", total price \"200\", deposit paid \"true\", check-in \"2020-02-01\", check-out \"2020-02-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"15\"","offset":40},{"val":"\"Tarik\"","offset":56},{"val":"\"200\"","offset":77},{"val":"\"true\"","offset":97},{"val":"\"2020-02-01\"","offset":114},{"val":"\"2020-02-02\"","offset":138},{"val":"\"Burger\"","offset":152}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":999000,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:08.608Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":17,"name":"F02| Try to create a booking with invalid info and retrieve a booking","description":"","id":"booking-api-with-invalid-info;f02|-try-to-create-a-booking-with-invalid-info-and-retrieve-a-booking;;10","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":316009900,"status":"passed"},"line":5,"name":"I create a booking with invalid info of \"Samer\", last name \"15\", total price \"200\", deposit paid \"true\", check-in \"2020-02-01\", check-out \"2020-02-02\", \"Burger\" successfully","match":{"arguments":[{"val":"\"Samer\"","offset":40},{"val":"\"15\"","offset":59},{"val":"\"200\"","offset":77},{"val":"\"true\"","offset":97},{"val":"\"2020-02-01\"","offset":114},{"val":"\"2020-02-02\"","offset":138},{"val":"\"Burger\"","offset":152}],"location":"stepDef.D02_invalidInfo.i_create_a_booking_with_invalid_info_of_last_name_total_price_deposit_paid_check_in_check_out_successfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"error_message":"java.lang.AssertionError: expected [404] but found [200]\r\n\tat org.testng.Assert.fail(Assert.java:110)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:1577)\r\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:149)\r\n\tat org.testng.Assert.assertEquals(Assert.java:131)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1418)\r\n\tat org.testng.Assert.assertEquals(Assert.java:1448)\r\n\tat stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(D02_invalidInfo.java:21)\r\n\tat ✽.status code should be 404 for all invalid entries(file:///F:/APIpractice/rest/src/main/resources/features/F02_InvalidInfo.feature:6)\r\n","duration":1000100,"status":"failed"},"line":6,"name":"status code should be 404 for all invalid entries","match":{"arguments":[{"val":"404","offset":22}],"location":"stepDef.D02_invalidInfo.status_code_should_be_for_all_invalid_entries(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"Booking API with invalid info","description":"","id":"booking-api-with-invalid-info","keyword":"Feature","uri":"file:src/main/resources/features/F02_InvalidInfo.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:08.937Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":4,"name":"F03|  User sends a get request to get all the booking ids","description":"","id":"retrieve-all-booking-ids;f03|--user-sends-a-get-request-to-get-all-the-booking-ids","after":[{"result":{"duration":1000400,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":655281400,"status":"passed"},"line":5,"name":"user sends a get request to get all id of booking","match":{"location":"stepDef.D03_userRetrieveAllBookings.user_gets_all_id()"},"keyword":"Given "},{"result":{"duration":999400,"status":"passed"},"line":6,"name":"status code should be 200 success","match":{"arguments":[{"val":"200","offset":22}],"location":"stepDef.D03_userRetrieveAllBookings.status_code_should_be_success(java.lang.Integer)"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"Retrieve All booking ids","description":"","id":"retrieve-all-booking-ids","keyword":"Feature","uri":"file:src/main/resources/features/F03_userRetrieveAllBooking.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:09.602Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":4,"name":"F04 |  User sends a post request to /auth","description":"","id":"generating-auth-token;f04-|--user-sends-a-post-request-to-/auth","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":328812100,"status":"passed"},"line":5,"name":"user sends a post request to get auth with username : \"admin\" and password: \"password123\" token","match":{"arguments":[{"val":"\"admin\"","offset":54},{"val":"\"password123\"","offset":76}],"location":"stepDef.D04_userCanCreateAuthToken.user_sends_a_post_request_to_get_auth_with_username_and_password_token(java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"duration":46483400,"status":"passed"},"line":6,"name":"auth token should be returned","match":{"location":"stepDef.D04_userCanCreateAuthToken.auth_token_should_be_returned()"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"generating auth token","description":"","id":"generating-auth-token","keyword":"Feature","uri":"file:src/main/resources/features/F04_userCanCreateAuthToken.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:09.987Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":9,"name":"F05 |  User sends a put request to booking/id","description":"","id":"user-can-update-booking-with-auth-token;f05-|--user-sends-a-put-request-to-booking/id;;2","after":[{"result":{"duration":999400,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario Outline","steps":[{"result":{"duration":787381800,"status":"passed"},"line":5,"name":"user sends a put request to id : \"4211\" with firstname: \"Mohammed\", last name \"Tarik\", total price \"500\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"2020-02-02\", additional needs \"Dinner\"","match":{"arguments":[{"val":"\"4211\"","offset":33},{"val":"\"Mohammed\"","offset":56},{"val":"\"Tarik\"","offset":78},{"val":"\"500\"","offset":99},{"val":"\"true\"","offset":119},{"val":"\"2020-01-01\"","offset":136},{"val":"\"2020-02-02\"","offset":160},{"val":"\"Dinner\"","offset":191}],"location":"stepDef.D05_updateBooking.user_sends_a_put_request_to_id_with_firstname_last_name_total_price_deposit_paid_check_in_check_out_additional_needs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"duration":438830200,"status":"passed"},"line":6,"name":"Booking with the given id is updated to match fn \"Mohammed\" ln \"Tarik\" \"500\" \"true\" \"2020-01-01\" \"2020-02-02\" \"Dinner\"","match":{"arguments":[{"val":"\"Mohammed\"","offset":49},{"val":"\"Tarik\"","offset":63},{"val":"\"500\"","offset":71},{"val":"\"true\"","offset":77},{"val":"\"2020-01-01\"","offset":84},{"val":"\"2020-02-02\"","offset":97},{"val":"\"Dinner\"","offset":110}],"location":"stepDef.D05_updateBooking.booking_with_the_given_id_is_updated_to_match_fn_ln(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"user can update booking with auth token","description":"","id":"user-can-update-booking-with-auth-token","keyword":"Feature","uri":"file:src/main/resources/features/F05_updateBooking.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:11.228Z","before":[{"result":{"duration":998900,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":4,"name":"F06 |  User sends a delete request to booking/id","description":"","id":"user-can-delete-booking-with-auth-token;f06-|--user-sends-a-delete-request-to-booking/id","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":341805900,"status":"passed"},"line":5,"name":"I create  booking with first name \"John\", last name \"Does\", total price \"200\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"<2020-02-02>\", \"Breakfast\" successfully","match":{"arguments":[{"val":"\"John\"","offset":34},{"val":"\"Does\"","offset":52},{"val":"\"200\"","offset":72},{"val":"\"true\"","offset":92},{"val":"\"2020-01-01\"","offset":109},{"val":"\"<2020-02-02>\"","offset":133},{"val":"\"Breakfast\"","offset":149}],"location":"stepDef.D06_DeleteClass.iCreateBookingWithFirstNameLastNameTotalPriceDepositPaidCheckInCheckOutSuccessfully(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"duration":652411900,"status":"passed"},"line":6,"name":"user enters auth token and sends a delete request to created id","match":{"location":"stepDef.D06_DeleteClass.user_enters_auth_token_and_sends_a_delete_request_to_id()"},"keyword":"And "},{"result":{"duration":314374100,"status":"passed"},"line":7,"name":"response to id inquiry should show not found","match":{"location":"stepDef.D06_DeleteClass.response_to_id_inquiry_should_show()"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"user can delete booking with auth token","description":"","id":"user-can-delete-booking-with-auth-token","keyword":"Feature","uri":"file:src/main/resources/features/F06_deleteBooking.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]},{"line":2,"elements":[{"start_timestamp":"2023-02-01T22:16:12.550Z","before":[{"result":{"duration":998000,"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":4,"name":"F07 |  User sends a put request to booking/id with invalid auth token","description":"","id":"user-shouldnt-be-able-to--update-booking-with-invalid-auth;f07-|--user-sends-a-put-request-to-booking/id-with-invalid-auth-token","after":[{"result":{"duration":998200,"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":328824100,"status":"passed"},"line":5,"name":"user sends a put request with invalid auth to id : \"4211\" with firstname: \"Mohammed\", last name \"Tarik\", total price \"500\", deposit paid \"true\", check-in \"2020-01-01\", check-out \"2020-02-02\", additional needs \"Dinner\"","match":{"arguments":[{"val":"\"4211\"","offset":51},{"val":"\"Mohammed\"","offset":74},{"val":"\"Tarik\"","offset":96},{"val":"\"500\"","offset":117},{"val":"\"true\"","offset":137},{"val":"\"2020-01-01\"","offset":154},{"val":"\"2020-02-02\"","offset":178},{"val":"\"Dinner\"","offset":209}],"location":"stepDef.D07_userUpdateOrDeleteWithoutToken.user_sends_a_put_request_with_invalid_auth_to_id_with_firstname_last_name_total_price_deposit_paid_check_in_check_out_additional_needs(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"},"keyword":"Given "},{"result":{"status":"passed"},"line":6,"name":"response should fail","match":{"location":"stepDef.D07_userUpdateOrDeleteWithoutToken.response_should_fail()"},"keyword":"Then "}],"tags":[{"name":"@api"}]},{"start_timestamp":"2023-02-01T22:16:12.889Z","before":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.setUp()"}}],"line":8,"name":"F07 |  User sends a delete request to booking/id with invalid auth token","description":"","id":"user-shouldnt-be-able-to--update-booking-with-invalid-auth;f07-|--user-sends-a-delete-request-to-booking/id-with-invalid-auth-token","after":[{"result":{"status":"passed"},"match":{"location":"stepDef.Hooks.cleanup()"}}],"type":"scenario","keyword":"Scenario","steps":[{"result":{"duration":305952300,"status":"passed"},"line":9,"name":"user sends a delete request to id 4211","match":{"arguments":[{"val":"4211","offset":34}],"location":"stepDef.D07_userUpdateOrDeleteWithoutToken.user_sends_a_delete_request_to_id(java.lang.Integer)"},"keyword":"Given "},{"result":{"duration":998000,"status":"passed"},"line":10,"name":"response should fail","match":{"location":"stepDef.D07_userUpdateOrDeleteWithoutToken.response_should_fail()"},"keyword":"Then "}],"tags":[{"name":"@api"}]}],"name":"user shouldnt be able to  update booking with invalid auth","description":"","id":"user-shouldnt-be-able-to--update-booking-with-invalid-auth","keyword":"Feature","uri":"file:src/main/resources/features/F07_userUpdateBookingWithoutToken.feature","tags":[{"name":"@api","type":"Tag","location":{"line":1,"column":1}}]}]